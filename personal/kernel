#!/usr/bin/env bash

# Copyright (C) 2020 Shashank Baghel
# Personal kernel build script for https://github.com/theradcolor/android_kernel_xiaomi_whyred
# That will build four varient of kernel i.e 2-2(oldcam & newcam) varient of EAS and HMP

# Set enviroment and vaiables
out="/home/theradcolor/whyred/out/"
BUILD="/home/theradcolor/whyred/kernel/"
ANYKERNEL_DIR="/home/theradcolor/whyred/anykernel/"
IMG="/home/theradcolor/whyred/out/arch/arm64/boot/Image.gz-dtb"
BUILD_START=$(date +"%s")

# Define colors
red='\033[0;31m'
green='\e[0;32m'
white='\033[0m'

clear

function checkout_source()
{
    # Checkout build dir.
    cd "${BUILD}" || exit
}

function type()
{
    # Export build type
    BRANCH="$(git rev-parse --abbrev-ref HEAD)"
    if [ "${BRANCH}" == "kernel-hmp" ]; then
       export TYPE=hmp
    elif [ "${BRANCH}" == "kernel-eas" ]; then
       export TYPE=eas
    elif [ "${BRANCH}" == "staging" ]; then
       export TYPE=staging
    fi
}

function set_param()
{
    # Export compiler dir.
    CLANG_TRIPLE=aarch64-linux-gnu-
    GCC64=/home/theradcolor/whyred/compilers/aarch64-linux-android-4.9/bin/aarch64-linux-android-
    GCC32=/home/theradcolor/whyred/compilers/arm-linux-androideabi-4.9/bin/arm-linux-androideabi-
    
    # Export ARCH <arm, arm64, x86, x86_64>
    export ARCH=arm64
    # Export SUBARCH <arm, arm64, x86, x86_64>
    export SUBARCH=arm64
    
    # CCACHE parameters
    ccache=$(which ccache)
    export USE_CCACHE=1
    export CCACHE_DIR="/home/theradcolor/.ccache"
    
    # kbuild host and user
    export KBUILD_BUILD_USER="shashank"
    export KBUILD_BUILD_HOST="manjaro"
    
    # Compiler String
    CC="${ccache} /home/theradcolor/whyred/compilers/clang-r383902/bin/clang"
    export KBUILD_COMPILER_STRING="$(${CC} --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g')"
}


function build_clang()
{
    checkout_source
    set_param
    make O="${out}" clean
    make O="${out}" mrproper
    rm -rf "${out}"/arch/arm64/boot
    make O="${out}" "${CONFIG}"

    make O="${out}" CC="${CC}" \
    CROSS_COMPILE="${GCC64}" \
    CROSS_COMPILE_ARM32="${GCC32}" \
    CLANG_TRIPLE="${CLANG_TRIPLE}" \
    -j6  2>&1| tee "$out"/kernel.log
    
    if [ -f "${IMG}" ]; then
        BUILD_END=$(date +"%s")
        DIFF=$("${BUILD_END}" - "${BUILD_START}")
        echo -e "${green}" "Build completed in $($DIFF / 60) minute(s) and $($DIFF % 60) seconds." "${green}"
        flash_zip
    else
		echo -e "${red}" "Build failed, please fix the errors first bish!" "${red}"
	fi
}

function flash_zip()
{
    echo -e "${green}" "Now making a flashable zip of kernel with AnyKernel3" "${white}"

    type
    check_camera
    cd "${ANYKERNEL_DIR}" || exit
    export ZIPNAME=rad-"${TYPE}"-"${CAM_TYPE}"-whyred.zip

    # Cleanup and copy Image.gz-dtb to dir.
    rm -f ./*.zip
    rm -f Image.gz-dtb
    cp "$out"/arch/arm64/boot/Image.gz-dtb "${ANYKERNEL_DIR}"/

    # Build a flashable zip
    zip -r9 "${ZIPNAME}" ./* -x README.md .git
}

function check_camera()
{
    CAMERA="$(grep 'BLOBS' $BUILD/arch/arm64/configs/"${CONFIG}")"
    if [ "${CAMERA}" == "CONFIG_XIAOMI_NEW_CAMERA_BLOBS=y" ]; then
            CAM_TYPE="newcam"
        elif [ "${CAMERA}" == "CONFIG_XIAOMI_NEW_CAMERA_BLOBS=n" ]; then
            CAM_TYPE="oldcam"
    fi
}

# Execution

# Checkout to HMP branch
checkout_source
type
if [ "${TYPE}" != "hmp" ]; then
       git checkout kernel-hmp
fi
clear

# HMP oldcam
CONFIG=whyred_defconfig # Configuration for oldcam
type
check_camera
echo -e "${green}" "Building $TYPE for $CAM_TYPE with Clang" "${white}"
build_clang # build_clang or build_gcc

# HMP newcam
CONFIG=whyred-newcam_defconfig # Configuration for newcam
type
check_camera
echo -e "${green}" "Building $TYPE for $CAM_TYPE with Clang" "${white}"
build_clang # build_clang or build_gcc

# Checkout to EAS branch
checkout_source
git checkout kernel-eas
clear

# EAS oldcam
CONFIG=whyred_defconfig # Configuration for oldcam
type
check_camera
echo -e "${green}" "Building $TYPE for $CAM_TYPE with Clang" "${white}"
build_clang # build_clang or build_gcc

# EAS newcam
CONFIG=whyred-newcam_defconfig # Configuration for newcam
type
check_camera
echo -e "${green}" "Building $TYPE for $CAM_TYPE with Clang" "${white}"
build_clang # build_clang or build_gcc
